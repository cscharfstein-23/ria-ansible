apiVersion: v1
kind: ConfigMap
metadata:
  name: frontend-files-cm
data:
  app.py: |
    import os
    import requests
    from flask import Flask, jsonify, render_template_string, Response, request
    import kubernetes
    from kubernetes import client, config
    import requests

    app = Flask(__name__)

    # Try to load in-cluster config (works inside k8s pod)
    try:
        config.load_incluster_config()
    except:
        # Fallback to local kubeconfig (for testing)
        config.load_kube_config()

    v1 = client.CoreV1Api()

    # HTML template (your HTML with dropdown + JS added)
    HTML_PAGE = """
    <!doctype html>
    <html>
    <head>
      <meta charset="utf-8" />
      <title>Live Webcam Demo</title>
      <style>
        body{display:flex;flex-direction:column;align-items:center;padding:1rem;font-family:sans-serif}
        img{max-width:90%;height:auto;border:1px solid #ddd;border-radius:8px}
        select{margin:1rem;padding:0.5rem}
      </style>
    </head>
    <body>
    <?xml version="1.0" encoding="utf-8"?> <!-- Generator: Adobe Illustrator 23.0.1, SVG Export Plug-In . SVG Version: 6.00 Build 0) --> <svg height="150px" version="1.1" id="Livello_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" width="1000px" height="401.149px" viewBox="0 0 1000 401.149" enable-background="new 0 0 1000 401.149" xml:space="preserve"> <g> <g> <polygon id="Rectangle-path" fill="#0f62fe" points="0,373.217 194.433,373.217 194.433,401.05 0,401.05 "/> <polygon id="Rectangle-path_1_" fill="#0f62fe" points="0,319.83 194.433,319.83 194.433,347.761 0,347.761 "/> <polygon id="Rectangle-path_2_" fill="#0f62fe" points="55.468,266.541 138.867,266.541 138.867,294.473 55.468,294.473 "/> <polygon id="Rectangle-path_3_" fill="#0f62fe" points="55.468,213.253 138.867,213.253 138.867,241.185 55.468,241.185 "/> <polygon id="Rectangle-path_4_" fill="#0f62fe" points="55.468,159.964 138.867,159.964 138.867,187.896 55.468,187.896 "/> <polygon id="Rectangle-path_5_" fill="#0f62fe" points="55.468,106.577 138.867,106.577 138.867,134.509 55.468,134.509 "/> <rect id="Rectangle-path_6_" y="53.288" fill="#0f62fe" width="194.433" height="27.932"/> <rect id="Rectangle-path_7_" fill="#0f62fe" width="194.433" height="27.932"/> </g> <g> <path id="Shape_16_" fill="#0f62fe" d="M222.167,347.761h299.029c5.051-8.617,8.815-18.027,11.094-27.932H222.167V347.761z"/> <path id="Shape_17_" fill="#0f62fe" d="M497.92,213.253H277.734v27.932h243.463C514.857,230.487,507.032,221.078,497.92,213.253z" /> <path id="Shape_18_" fill="#0f62fe" d="M277.734,159.964v27.932H497.92c9.311-7.825,17.135-17.235,23.277-27.932H277.734z"/> <path id="Shape_19_" fill="#0f62fe" d="M521.197,53.288H222.167V81.22H532.29C529.715,71.315,525.951,61.906,521.197,53.288z"/> <path id="Shape_20_" fill="#0f62fe" d="M429.279,0H222.167v27.932h278.526C482.072,10.697,456.815,0,429.279,0z"/> <rect id="Rectangle-path_8_" x="277.734" y="106.577" fill="#0f62fe" width="83.3" height="27.932"/> <path id="Shape_21_" fill="#0f62fe" d="M444.433,134.509h87.163c2.476-8.914,3.764-18.324,3.764-27.932h-90.927L444.433,134.509 L444.433,134.509z"/> <polygon id="Rectangle-path_9_" fill="#0f62fe" points="277.734,266.541 361.034,266.541 361.034,294.473 277.734,294.473 "/> <path id="Shape_22_" fill="#0f62fe" d="M444.433,266.541v27.932h90.927c0-9.608-1.288-19.017-3.764-27.932H444.433z"/> <path id="Shape_23_" fill="#0f62fe" d="M222.167,400.852l207.112,0.297c27.734,0,52.793-10.697,71.513-27.932H222.167V400.852z"/> </g> <g> <polygon id="Rectangle-path_10_" fill="#0f62fe" points="555.567,373.217 694.433,373.217 694.433,401.05 555.567,401.05 "/> <polygon id="Rectangle-path_11_" fill="#0f62fe" points="555.567,319.83 694.433,319.83 694.433,347.761 555.567,347.761 "/> <polygon id="Rectangle-path_12_" fill="#0f62fe" points="611.034,266.541 694.433,266.541 694.433,294.473 611.034,294.473 "/> <polygon id="Rectangle-path_13_" fill="#0f62fe" points="611.034,213.253 694.433,213.253 694.433,241.185 611.034,241.185 "/> <polygon id="Shape_24_" fill="#0f62fe" points="733.063,53.288 555.567,53.288 555.567,81.22 742.67,81.22 "/> <polygon id="Shape_25_" fill="#0f62fe" points="714.639,0 555.567,0 555.567,27.932 724.247,27.932 "/> <polygon id="Rectangle-path_14_" fill="#0f62fe" points="861.034,373.217 1000,373.217 1000,401.05 861.034,401.05 "/> <polygon id="Rectangle-path_15_" fill="#0f62fe" points="861.034,319.83 1000,319.83 1000,347.761 861.034,347.761 "/> <polygon id="Rectangle-path_16_" fill="#0f62fe" points="861.034,266.541 944.433,266.541 944.433,294.473 861.034,294.473 "/> <polygon id="Rectangle-path_17_" fill="#0f62fe" points="861.034,213.253 944.433,213.253 944.433,241.185 861.034,241.185 "/> <polygon id="Shape_26_" fill="#0f62fe" points="861.034,187.896 944.433,187.896 944.433,159.964 861.034,159.964 861.034,159.964 785.559,159.964 777.734,182.548 769.909,159.964 694.433,159.964 694.433,159.964 611.034,159.964 611.034,187.896 694.433,187.896 694.433,162.242 703.249,187.896 852.219,187.896 861.034,162.242 "/> <polygon id="Shape_27_" fill="#0f62fe" points="944.433,106.577 803.982,106.577 794.374,134.509 944.433,134.509 "/> <polygon id="Shape_28_" fill="#0f62fe" points="840.927,0 831.319,27.932 1000,27.932 1000,0 "/> <polygon id="Shape_29_" fill="#0f62fe" points="777.734,400.852 787.341,373.217 768.126,373.217 "/> <polygon id="Shape_30_" fill="#0f62fe" points="759.311,347.761 796.157,347.761 806.062,319.83 749.505,319.83 "/> <polygon id="Shape_31_" fill="#0f62fe" points="740.59,294.473 814.877,294.473 824.683,266.541 730.784,266.541 "/> <polygon id="Shape_32_" fill="#0f62fe" points="721.969,241.185 833.597,241.185 843.106,213.253 712.361,213.253 "/> <polygon id="Shape_33_" fill="#0f62fe" points="611.034,134.509 761.093,134.509 751.486,106.577 611.034,106.577 "/> <polygon id="Shape_34_" fill="#0f62fe" points="812.896,81.22 1000,81.22 1000,53.288 822.405,53.288 "/> </g> </g> </svg>
      <h1>Webcam feed</h1>
      <select id="backendSelect"></select>
      <img id="cam" src="" alt="webcam feed" />
      <p>The image above is proxied live through IBM Hybrid Cloud Mesh.</p>

      <script>
       async function loadBackends() {
    const res = await fetch('/backends');
    const backends = await res.json();
    const select = document.getElementById('backendSelect');
    const current = select.value; // remember current selection

    select.innerHTML = '';
    backends.forEach(b => {
      let opt = document.createElement('option');
      opt.value = b;
      opt.textContent = b;
      if (b === current) {
        opt.selected = true; // preserve selection
      }
      select.appendChild(opt);
    });

    // If nothing selected yet, pick the first one
    if (!current && backends.length > 0) {
      select.value = backends[0];
      document.getElementById('cam').src = '/video_feed/' + backends[0];
    }
    }

    document.getElementById('backendSelect').addEventListener('change', function() {
      document.getElementById('cam').src = '/video_feed/' + this.value;
    });


        loadBackends();
        setInterval(loadBackends, 1000); // refresh backend list every 1s
      </script>
    </body>
    </html>
    """

    @app.route("/")
    def index():
        return render_template_string(HTML_PAGE)

    @app.route("/backends")
    def list_backends():
        """Return list of available backend services"""
        services = v1.list_namespaced_service(namespace=os.getenv("NAMESPACE", "super-automation-demo"))
        backends = [
            svc.metadata.name
            for svc in services.items
            if svc.metadata.name.startswith("camera-backend")
        ]
        return jsonify(backends)

    @app.route("/video_feed/<backend>")
    def proxy_feed(backend):
        """Stream MJPEG from selected backend service"""
        url = f"http://{backend}:5000/video_feed"
        def generate():
            with requests.get(url, stream=True) as r:
                for chunk in r.iter_content(chunk_size=1024):
                    if chunk:
                        yield chunk
        return Response(generate(), content_type="multipart/x-mixed-replace; boundary=frame")

    if __name__ == "__main__":
        app.run(host="0.0.0.0", port=80)

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: camera-frontend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: camera-frontend
  template:
    metadata:
      labels:
        app: camera-frontend
    spec:
      containers:
        - name: nginx
          image: python:3.11-slim
          command: ["sh", "-c"]
          args:
            - pip install --no-cache-dir flask kubernetes  requests && python /app/app.py
          ports:
            - containerPort: 80
          volumeMounts:
            - name: frontend-files
              mountPath: /app/
      volumes:
        - name: frontend-files
          configMap:
            name: frontend-files-cm
            items:
              - key: app.py
                path: app.py
---
apiVersion: v1
kind: Service
metadata:
  name: frontend-service
spec:
  selector:
    app: camera-frontend
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
      nodePort: 30080
  type: NodePort
