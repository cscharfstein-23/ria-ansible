apiVersion: v1
kind: ConfigMap
metadata:
  name: camera-backend-app-cm
data:
  app.py: |
    import cv2, threading, time
    from flask import Flask, Response

    app = Flask(__name__)

    class Camera:
        def __init__(self):
            self.cap = cv2.VideoCapture(0)
            if not self.cap.isOpened():
                raise RuntimeError("Could not open video device")
            self.frame = None
            self.lock = threading.Lock()
            t = threading.Thread(target=self._update, daemon=True)
            t.start()

        def _update(self):
            while True:
                ret, frame = self.cap.read()
                if ret:
                    with self.lock:
                        self.frame = frame
                time.sleep(0.03)  # ~30fps

        def get_jpeg(self):
            with self.lock:
                if self.frame is None:
                    return None
                ret, jpeg = cv2.imencode(".jpg", self.frame)
                if ret:
                    return jpeg.tobytes()
                return None

    camera = Camera()

    def mjpeg_gen():
        while True:
            frame = camera.get_jpeg()
            if frame:
                yield (b'--frame\r\n'
                    b'Content-Type: image/jpeg\r\n\r\n' + frame + b'\r\n')
            time.sleep(0.03)

    @app.route("/video_feed")
    def video_feed():
        return Response(mjpeg_gen(), mimetype="multipart/x-mixed-replace; boundary=frame")

    @app.route('/')
    def index():
        # Simple human-readable page for debug if accessed directly
        return render_template_string('<html><body><h1>Backend: webcam stream</h1><img src="/video_feed"></body></html>')

    if __name__ == '__main__':
        # listen on 0.0.0.0 so other pods can reach it
        app.run(host='0.0.0.0', port=5000)
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: camera-backend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: camera-backend
  template:
    metadata:
      labels:
        app: camera-backend
    spec:
      # Service account / permissions not required for this demo
      containers:
      - name: backend
        image: python:3.11-slim
        securityContext:
            privileged: true
        command: ["sh", "-c"]
        args:
          - apt-get update && apt-get install -y ffmpeg libsm6 libxext6 && pip install --no-cache-dir flask opencv-python-headless && python /app/app.py
        ports:
        - containerPort: 5000
        volumeMounts:
        - name: app-code
          mountPath: /app
        - name: video0
          mountPath: /dev/video0
      volumes:
      - name: app-code
        configMap:
          name: camera-backend-app-cm
          defaultMode: 420
      - name: video0
        hostPath:
          path: /dev/video0
          type: CharDevice